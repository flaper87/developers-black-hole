Title: Highlights from 'Passionate Programmer by Chad Fowler'
Date: 2013-11-27 17:50
Author: Flavio Percoco
Tags: books,development,motivation,python
Slug: passionate-programmer-highlights

Hey all,

I recently finished reading 'Passionate Programmer by Chad Fowler' and thought about sharing my highlights from the book:

<br />
>If you want to stay relevant, you’re going to have to dive into the domain of the business you’re in.

<br />
>So, although a single-minded investment in one particular technology is almost always a bad idea, if you must do so, consider focusing on an open source option, as opposed to a commercial one.

<br />
>“Let the vendors come and go—I know how to design a system!”

<br />
>In the traditional professional world (and specifically the IT trade), we’re less likely to ask each other for help. Depending on others is often seen as a sign of weakness. We’re afraid to admit that we’re not perfect. Everything is competition.

<br />
>Mentoring yourself—We’d all ideally have someone to actively mentor us, but the reality is that we won’t always be able to find someone in the same location that we can place in this role.

<br />
>If you want to really learn something, try teaching it to someone else.

<br />
>Parkinson’s law states that “Work expands so as to fill the time available for its completion.”

<br />
>Block off half an hour on your calendar, and sit down with a pencil and paper in a quiet place where you won’t be interrupted. Think about the little nitpicky problems your team puts up with on a daily basis. Write them down. What are the annoying tasks that waste a few minutes of the team’s time each day but nobody has had the time or energy to do anything about?

<br />
>keeping your mind focused on the present will get you further toward your goals

<br />
>Humility is not just something we develop so we can claim to be more spiritual.

<br />
>the more successful you are, the more likely you are to make a fatal mistake.

<br />
>Make sure you sleep well tonight. Tomorrow, eat breakfast and then start work at an exact time (preferably a little earlier than usual). Work intensely for four hours. Take an hour lunch. Then work for four more hours so intensely that you are absolutely exhausted and can’t do any more. Go home, relax, and have fun.

<br />
>Karl Brophey, a reviewer, suggests keeping a list of every commitment you make:

<br />
>The easiest way to never get anything done is to never commit to anything. If you don’t have a deadline, you don’t have any pressure or much incentive to finish something.

<br />
>The most critical factor to keep in mind with everything that goes onto a plan is that it should always be accounted for later. Every item must be either visibly completed, delayed, removed, or replaced. No items should go unaccounted for.

<br />
>the traits of a great programmer are laziness, impatience, and hubris.

<br />
>Pragmatically speaking, managers don’t have time to keep close tabs on what each employee is doing every day. And neither companies nor their employees would want managers spending their time this way. Companies want managers focusing on the big picture—not tracking daily tasks.

<br />
>Perceptions really do matter.

<br />
>Understanding what’s important in each of your relationships is an important part of building credible perceptions with those you interact with.

<br />
>Start keeping a development diary. Write a little in it each day, explaining what you’ve been working on, justifying your design decisions, and vetting tough technical or professional decisions. Even though you are the primary (or only—it’s up to you) audience, pay attention to the quality of your writing and to your ability to clearly express yourself.

<br />
>What would you say if your CEO asked you the same question out of the blue? Even given a few minutes to prepare, would you be able to explain the business benefit of the tasks you are doing or the tasks you had recently done?

<br />
>Don’t be a jerk about it, but don’t tiptoe around always playing it conservative either.

<br />
>You might forget, but Google doesn’t.

<br />
>Open source contributions demonstrate skill.

<br />
>Leading an open source project can demonstrate much more than technical ability. It takes skills in leadership, release management, documentation, and product and community support to foster a community around your efforts.

<br />
>You might be the smartest or the fastest, but just being isn’t good enough. You have to be doing.

<br />
>Research, invest, execute, market, repeat. Spending too much time inside any iteration of the loop puts you at risk of becoming suddenly obsolete.

<br />
>Success breeds hubris, which breeds complacency. A wave like J2EE might feel like it will never end. But, all waves either dissipate or meet the shore eventually.

<br />
>Looking ahead and being explicit about your skill development can mean the difference between being blind or visionary.

<br />
>If you want to hit a moving target, you don’t aim for the target itself. You aim for where the target is likely to go.

<br />
>It’s how you traverse the path that’s important—not the destination.

<br />
>A personal product road map not only can help you stay on track, constantly evolving, but it can also show you the bigger picture of what you have to offer.

<br />
>Don’t let obsolescence creep up on you like a pair of tight-fitting pants.

<br />
>Value rigidity is what happens when you believe in the value of something so strongly that you can no longer objectively question it.

<br />
>Whether it is the direction your career is taking or the technologies you advocate and invest in, beware of monkey traps.

<br />
>The secret is to focus on making whatever it is you’re trying to improve better today than it was yesterday.

<br />
>noticeable difference in the whole with each incremental change, though. When you’re trying to become more respected in your workplace or be healthier, the individual improvements you make each day often won’t lead directly to tangible results.

<br />
>So, make your improvements small and incremental but daily. Small improvements also decrease the cost of failure. If you miss a day, you have a new baseline for tomorrow.

<br />
>Software development is both challenging and rewarding.

<br />
>Software development is fun!

<br />
>it’s not what you do for a living or what you have that’s important. It’s how you choose to accept these things.